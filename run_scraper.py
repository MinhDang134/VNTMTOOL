import asyncio
from datetime import datetime, timedelta, date as date_type
import os
from concurrent.futures import ProcessPoolExecutor, as_completed  # CRISTIANO
from multiprocessing import Manager  # CRISTIANO
from functools import partial  # CRISTIANO
from sqlmodel import create_engine  # CRISTIANO
from src.tools.config import settings
from src.tools.service import ScraperService
from src.tools.database import get_session, ensure_partition_exists  # CRISTIANO
from src.tools.state_manager import (
    load_scrape_state, save_scrape_state,
    load_control_state, save_control_state, get_control_state_path,
    clear_page_state_for_day
)
import logging  # CRISTIANO

logging.basicConfig(  # CRISTIANO
    level=logging.INFO,  # CRISTIANO
    format='%(asctime)s - %(processName)s (%(process)d) - %(name)s - %(levelname)s - %(message)s',  # CRISTIANO
    handlers=[  # CRISTIANO
        logging.FileHandler("scraper_activity.log", mode='a', encoding='utf-8'),  # CRISTIANO
        logging.StreamHandler()  # CRISTIANO
    ]  # CRISTIANO
)  # CRISTIANO

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
MEDIA_PHYSICAL_DIR = os.path.join(PROJECT_ROOT, "media_root", "brand_images")
os.makedirs(MEDIA_PHYSICAL_DIR, exist_ok=True)
logging.info(f"Th∆∞ m·ª•c l∆∞u tr·ªØ media: {MEDIA_PHYSICAL_DIR}")

PAGE_STATE_FILE_PATH = os.path.join(PROJECT_ROOT, "scraper_page_state.json")
CONTROL_STATE_FILE_PATH = get_control_state_path(PROJECT_ROOT)

RUN_DURATION_SECONDS = settings.RUN_DURATION_MINUTES * 60
PAUSE_DURATION_SECONDS = settings.PAUSE_DURATION_MINUTES * 60
NUM_PROCESSES = settings.CONCURRENT_SCRAPING_TASKS


def scrape_day_worker(  # CRISTIANO
        current_day_to_process: date_type,  # CRISTIANO
        db_url: str,  # CRISTIANO
        page_state_file_path: str,  # CRISTIANO
        page_state_lock,  # CRISTIANO
        media_physical_dir_worker: str,  # CRISTIANO
):  # CRISTIANO
    log = logging.getLogger(f"Worker-{current_day_to_process.strftime('%Y-%m-%d')}")  # CRISTIANO
    log.info(f"Worker b·∫Øt ƒë·∫ßu x·ª≠ l√Ω ng√†y: {current_day_to_process}")  # CRISTIANO

    try:  # CRISTIANO
        worker_engine = create_engine(db_url, pool_pre_ping=True)  # CRISTIANO

        scraper = ScraperService(  # CRISTIANO
            media_dir=media_physical_dir_worker,  # CRISTIANO
        )  # CRISTIANO

        day_key = f"brands_{current_day_to_process.strftime('%Y-%m-%d')}_{current_day_to_process.strftime('%Y-%m-%d')}"  # CRISTIANO

        def state_saver_callback_for_day_in_worker(page_just_completed: int):  # CRISTIANO
            save_scrape_state(page_state_file_path, day_key, page_just_completed, page_state_lock)  # CRISTIANO

        initial_page_for_this_day = load_scrape_state(page_state_file_path, day_key)  # CRISTIANO

        scrape_result = {}  # CRISTIANO
        loop = asyncio.new_event_loop()  # CRISTIANO
        asyncio.set_event_loop(loop)  # CRISTIANO
        try:  # CRISTIANO
            dt_for_partition = datetime.combine(current_day_to_process, datetime.min.time())  # CRISTIANO
            ensure_partition_exists(dt_for_partition, worker_engine)  # CRISTIANO

            with get_session(worker_engine) as session:  # CRISTIANO
                scrape_result = loop.run_until_complete(scraper.scrape_by_date_range(  # CRISTIANO
                    start_date=current_day_to_process,  # CRISTIANO
                    end_date=current_day_to_process,  # CRISTIANO
                    session=session,  # CRISTIANO
                    initial_start_page=initial_page_for_this_day,  # CRISTIANO
                    state_save_callback=state_saver_callback_for_day_in_worker  # CRISTIANO
                ))  # CRISTIANO
        finally:  # CRISTIANO
            loop.close()  # CRISTIANO

        log.info(
            f"Worker ho√†n th√†nh x·ª≠ l√Ω ng√†y {current_day_to_process} v·ªõi k·∫øt qu·∫£: {scrape_result.get('status')}")  # CRISTIANO
        return {"date": current_day_to_process, "result": scrape_result}  # CRISTIANO

    except Exception as e:  # CRISTIANO
        log.error(f"L·ªói nghi√™m tr·ªçng trong worker cho ng√†y {current_day_to_process}: {e}", exc_info=True)  # CRISTIANO
        return {"date": current_day_to_process,
                "result": {"status": "worker_crash", "message": str(e), "brands_processed_count": 0}}  # CRISTIANO
    finally:  # CRISTIANO
        if 'worker_engine' in locals() and worker_engine:  # CRISTIANO
            worker_engine.dispose()  # CRISTIANO


def get_next_day_to_process() -> date_type:
    control_state = load_control_state(CONTROL_STATE_FILE_PATH)
    last_completed_str = control_state.get("last_fully_completed_day")

    if last_completed_str:
        try:
            last_completed_date = datetime.strptime(last_completed_str, "%Y-%m-%d").date()
            next_day = last_completed_date + timedelta(days=1)
            logging.info(
                f"Ng√†y cu·ªëi c√πng ho√†n th√†nh ƒë∆∞·ª£c ghi nh·∫≠n: {last_completed_str}. Ng√†y ti·∫øp theo ƒë·ªÉ x·ª≠ l√Ω: {next_day.strftime('%Y-%m-%d')}")
            return next_day
        except ValueError:
            logging.warning(
                f"ƒê·ªãnh d·∫°ng ng√†y trong file tr·∫°ng th√°i ƒëi·ªÅu khi·ªÉn kh√¥ng h·ª£p l·ªá: '{last_completed_str}'. S·∫Ω b·∫Øt ƒë·∫ßu t·ª´ ng√†y c·∫•u h√¨nh.")

    start_date = date_type(
        settings.INITIAL_SCRAPE_START_YEAR,
        settings.INITIAL_SCRAPE_START_MOTH,
        settings.INITIAL_SCRAPE_START_DAY
    )
    logging.info(
        f"Kh√¥ng c√≥ tr·∫°ng th√°i ng√†y ho√†n th√†nh h·ª£p l·ªá. B·∫Øt ƒë·∫ßu t·ª´ ng√†y c·∫•u h√¨nh m·∫∑c ƒë·ªãnh: {start_date.strftime('%Y-%m-%d')}")
    return start_date


def get_overall_end_date() -> date_type:
    if settings.OVERALL_SCRAPE_END_YEAR and settings.OVERALL_SCRAPE_END_MOTH and settings.OVERALL_SCRAPE_END_DAY:
        try:
            return date_type(
                settings.OVERALL_SCRAPE_END_YEAR,
                settings.OVERALL_SCRAPE_END_MOTH,
                settings.OVERALL_SCRAPE_END_DAY
            )
        except (TypeError, ValueError) as e:
            logging.warning(
                f"M·ªôt s·ªë gi√° tr·ªã OVERALL_SCRAPE_END trong settings kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu: {e}. S·∫Ω m·∫∑c ƒë·ªãnh l√† ng√†y h√¥m qua.")
    return datetime.now().date() - timedelta(days=1)


async def daily_scraping_manager():  # CRISTIANO
    logging.info("Kh·ªüi t·∫°o Scraping Manager v·ªõi Multiprocessing.")  # CRISTIANO

    with Manager() as manager:  # CRISTIANO
        page_state_lock = manager.Lock()  # CRISTIANO

        with ProcessPoolExecutor(max_workers=NUM_PROCESSES) as executor:  # CRISTIANO
            current_day_to_process = get_next_day_to_process()  # CRISTIANO
            overall_end_date = get_overall_end_date()  # CRISTIANO

            active_futures = {}  # CRISTIANO

            while True:  # CRISTIANO
                logging.info(  # CRISTIANO
                    f"====== B·∫ÆT ƒê·∫¶U PHI√äN L√ÄM VI·ªÜC M·ªöI ({settings.RUN_DURATION_MINUTES} PH√öT) l√∫c {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ======")  # CRISTIANO
                session_start_time_ns = asyncio.get_event_loop().time()  # CRISTIANO

                days_processed_in_this_session = 0  # CRISTIANO

                while (asyncio.get_event_loop().time() - session_start_time_ns) < RUN_DURATION_SECONDS:  # CRISTIANO
                    # completed_futures_dates = [] # CRISTIANO (D√≤ng n√†y kh√¥ng c·∫ßn thi·∫øt)
                    for future in as_completed(
                            list(active_futures.keys())):  # CRISTIANO (Th√™m list() ƒë·ªÉ tr√°nh l·ªói RuntimeError: dictionary changed size during iteration)
                        processed_date = active_futures.pop(future)  # CRISTIANO
                        try:  # CRISTIANO
                            worker_output = future.result()  # CRISTIANO
                            scrape_status = worker_output.get("result", {}).get("status",
                                                                                "unknown_error_from_worker")  # CRISTIANO
                            brands_count = worker_output.get("result", {}).get("brands_processed_count", 0)  # CRISTIANO
                            message = worker_output.get("result", {}).get("message", scrape_status)  # CRISTIANO

                            logging.info(
                                f"Worker cho ng√†y {processed_date.strftime('%Y-%m-%d')} ƒë√£ HO√ÄN TH√ÄNH. Status: {scrape_status}, Brands: {brands_count}, Msg: {message}")  # CRISTIANO

                            if scrape_status in ["completed_all_pages", "no_data_on_first_page"]:  # CRISTIANO
                                logging.info(
                                    f"‚úÖ HO√ÄN T·∫§T X·ª¨ L√ù D·ªÆ LI·ªÜU CHO NG√ÄY: {processed_date.strftime('%Y-%m-%d')}.")  # CRISTIANO
                                save_control_state(CONTROL_STATE_FILE_PATH, processed_date)  # CRISTIANO
                                clear_page_state_for_day(PAGE_STATE_FILE_PATH, processed_date,
                                                         page_state_lock)  # CRISTIANO
                                days_processed_in_this_session += 1  # CRISTIANO
                            elif scrape_status == "worker_crash":  # CRISTIANO
                                logging.error(
                                    f"üíÄ Worker cho ng√†y {processed_date.strftime('%Y-%m-%d')} b·ªã CRASH. L√Ω do: {message}")  # CRISTIANO
                            else:  # CRISTIANO
                                logging.warning(
                                    f"Ng√†y {processed_date.strftime('%Y-%m-%d')} ch∆∞a ho√†n th√†nh b·ªüi worker. "  # CRISTIANO
                                    f"L√Ω do: {message}.")  # CRISTIANO
                        except Exception as e:  # CRISTIANO
                            logging.error(
                                f"L·ªói khi l·∫•y k·∫øt qu·∫£ t·ª´ future cho ng√†y {processed_date.strftime('%Y-%m-%d')}: {e}",
                                exc_info=True)  # CRISTIANO

                    while len(active_futures) < NUM_PROCESSES:  # CRISTIANO
                        if current_day_to_process > overall_end_date:  # CRISTIANO
                            logging.info(
                                f"ƒê√£ ƒë·∫°t ƒë·∫øn ng√†y k·∫øt th√∫c t·ªïng th·ªÉ ({overall_end_date.strftime('%Y-%m-%d')}). Kh√¥ng th√™m task m·ªõi.")  # CRISTIANO
                            break  # CRISTIANO

                        logging.info(
                            f"--- Chu·∫©n b·ªã g·ª≠i task cho ng√†y: {current_day_to_process.strftime('%Y-%m-%d')} ---")  # CRISTIANO

                        worker_func_partial = partial(  # CRISTIANO
                            scrape_day_worker,  # CRISTIANO
                            db_url=settings.DATABASE_URL,  # CRISTIANO
                            page_state_file_path=PAGE_STATE_FILE_PATH,  # CRISTIANO
                            page_state_lock=page_state_lock,  # CRISTIANO
                            media_physical_dir_worker=MEDIA_PHYSICAL_DIR  # CRISTIANO
                        )  # CRISTIANO

                        future = executor.submit(worker_func_partial, current_day_to_process)  # CRISTIANO
                        active_futures[future] = current_day_to_process  # CRISTIANO
                        logging.info(
                            f"ƒê√£ g·ª≠i task x·ª≠ l√Ω ng√†y {current_day_to_process.strftime('%Y-%m-%d')} cho worker.")  # CRISTIANO

                        current_day_to_process += timedelta(days=1)  # CRISTIANO

                        if len(active_futures) == NUM_PROCESSES:  # CRISTIANO
                            logging.info(
                                f"ƒê√£ s·ª≠ d·ª•ng h·∫øt {NUM_PROCESSES} worker slots. Ch·ªù worker ho√†n th√†nh...")  # CRISTIANO

                    if not active_futures and current_day_to_process > overall_end_date:  # CRISTIANO
                        logging.info(
                            "Kh√¥ng c√≤n task n√†o ƒëang ch·∫°y v√† ƒë√£ x·ª≠ l√Ω h·∫øt c√°c ng√†y theo k·∫ø ho·∫°ch.")  # CRISTIANO
                        break  # CRISTIANO

                    await asyncio.sleep(0.1)  # CRISTIANO (Gi·∫£m th·ªùi gian sleep ƒë·ªÉ ki·ªÉm tra future nhanh h∆°n)

                    if (asyncio.get_event_loop().time() - session_start_time_ns) >= RUN_DURATION_SECONDS:  # CRISTIANO
                        logging.info(
                            "H·∫øt th·ªùi gian phi√™n l√†m vi·ªác quy ƒë·ªãnh. Ch·ªù c√°c task ƒëang ch·∫°y ho√†n th√†nh...")  # CRISTIANO
                        break  # CRISTIANO

                if active_futures:  # CRISTIANO
                    logging.info(
                        f"H·∫øt gi·ªù l√†m vi·ªác, ch·ªù {len(active_futures)} tasks ƒëang ch·∫°y ho√†n th√†nh...")  # CRISTIANO
                    # Chuy·ªÉn active_futures.keys() th√†nh list ƒë·ªÉ tr√°nh l·ªói thay ƒë·ªïi k√≠ch th∆∞·ªõc trong khi l·∫∑p
                    for future in as_completed(list(active_futures.keys())):  # CRISTIANO
                        processed_date = active_futures.pop(future)  # CRISTIANO
                        try:  # CRISTIANO
                            worker_output = future.result()  # CRISTIANO
                            scrape_status = worker_output.get("result", {}).get("status",
                                                                                "unknown_error_from_worker")  # CRISTIANO
                            brands_count = worker_output.get("result", {}).get("brands_processed_count", 0)  # CRISTIANO
                            message = worker_output.get("result", {}).get("message", scrape_status)  # CRISTIANO
                            logging.info(
                                f"Worker (sau gi·ªù) cho ng√†y {processed_date.strftime('%Y-%m-%d')} ƒë√£ HO√ÄN TH√ÄNH. Status: {scrape_status}, Brands: {brands_count}, Msg: {message}")  # CRISTIANO

                            if scrape_status in ["completed_all_pages", "no_data_on_first_page"]:  # CRISTIANO
                                save_control_state(CONTROL_STATE_FILE_PATH, processed_date)  # CRISTIANO
                                clear_page_state_for_day(PAGE_STATE_FILE_PATH, processed_date,
                                                         page_state_lock)  # CRISTIANO
                                days_processed_in_this_session += 1  # CRISTIANO
                            elif scrape_status == "worker_crash":  # CRISTIANO
                                logging.error(
                                    f"üíÄ Worker (sau gi·ªù) cho ng√†y {processed_date.strftime('%Y-%m-%d')} b·ªã CRASH. L√Ω do: {message}")  # CRISTIANO
                            else:  # CRISTIANO
                                logging.warning(
                                    f"Ng√†y (sau gi·ªù) {processed_date.strftime('%Y-%m-%d')} ch∆∞a ho√†n th√†nh b·ªüi worker. L√Ω do: {message}.")  # CRISTIANO
                        except Exception as e:  # CRISTIANO
                            logging.error(
                                f"L·ªói khi l·∫•y k·∫øt qu·∫£ t·ª´ future (sau gi·ªù) cho ng√†y {processed_date.strftime('%Y-%m-%d')}: {e}",
                                exc_info=True)  # CRISTIANO
                    active_futures.clear()  # CRISTIANO

                if days_processed_in_this_session == 0 and current_day_to_process <= overall_end_date:  # CRISTIANO
                    logging.info(f"Phi√™n l√†m vi·ªác k·∫øt th√∫c m√† kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c ng√†y n√†o m·ªõi.")  # CRISTIANO
                elif current_day_to_process > overall_end_date and not active_futures:  # CRISTIANO
                    logging.info(
                        f"ƒê√£ x·ª≠ l√Ω h·∫øt t·∫•t c·∫£ c√°c ng√†y cho ƒë·∫øn {overall_end_date.strftime('%Y-%m-%d')}. D·ª´ng ch∆∞∆°ng tr√¨nh.")  # CRISTIANO
                    break  # CRISTIANO

                logging.info(
                    f"====== K·∫æT TH√öC PHI√äN L√ÄM VI·ªÜC l√∫c {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ======")  # CRISTIANO

                if current_day_to_process > overall_end_date and not active_futures:  # CRISTIANO
                    break  # CRISTIANO

                logging.info(
                    f"====== B·∫ÆT ƒê·∫¶U NGH·ªà NG∆†I ({settings.PAUSE_DURATION_MINUTES} PH√öT) l√∫c {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ======")  # CRISTIANO
                await asyncio.sleep(PAUSE_DURATION_SECONDS)  # CRISTIANO
                logging.info(
                    f"====== K·∫æT TH√öC NGH·ªà NG∆†I l√∫c {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ======")  # CRISTIANO

                current_day_to_process = get_next_day_to_process()  # CRISTIANO


async def main_async_runner():  # CRISTIANO
    await daily_scraping_manager()  # CRISTIANO


if __name__ == "__main__":
    try:  # CRISTIANO
        asyncio.run(main_async_runner())  # CRISTIANO
    except KeyboardInterrupt:  # CRISTIANO
        logging.info("Tool b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng (Ctrl+C).")  # CRISTIANO
    except Exception as e:  # CRISTIANO
        logging.critical(f"L·ªói nghi√™m tr·ªçng kh√¥ng b·∫Øt ƒë∆∞·ª£c ·ªü ph·∫°m vi cao nh·∫•t (main_async_runner): {e}",
                         exc_info=True)  # CRISTIANO
    finally:  # CRISTIANO
        logging.info("Ch∆∞∆°ng tr√¨nh k·∫øt th√∫c.")  # CRISTIANO